//==============================================================================
// Random.cpp
// Created 4/26/12.
//==============================================================================

#include "Random.h"
#include <iostream>
#include <cmath>

using namespace std;


//==============================================================================
// Member Function Definitions
//==============================================================================

//------------------------------------------------------------------------------
void checkSizes () {
   cout << "Size of u_32 (should be 4): " << sizeof(u_32) << '\n';
   cout << "Size of u_64 (should be 8): " << sizeof(u_64) << '\n';
   cout << "Size of f_64 (should be 8): " << sizeof(f_64) << '\n';
}

//------------------------------------------------------------------------------
void XorShift32::setState (u_64 seed) {
	_x= ((u_32*)&seed)[0];
	_y= ((u_32*)&seed)[1];
	for (u_32 j=0; j<6; ++j)
		next();
}

//------------------------------------------------------------------------------
void XorShift32::setState (u_32 lowSeed, u_32 highSeed) {
	_x= highSeed;
	_y= lowSeed;
	for (u_32 j=0; j<6; ++j)
		next();
}

//------------------------------------------------------------------------------
//return uniform random ub4 in range [0 .. 2^32-1]
XorShift32& XorShift32::next () {
	//here a,b,c= 3,-13,11
	u_32 t= _x^(_x<<3);
	_x = _y;
	_y = t^(t>>13)^_y^(_y<<11);
   return *this;
}

//------------------------------------------------------------------------------
//return uniform random double in [0.0, 1.0)
f_64 XorShift32::f64() {
   // pack a double
	union {
		u_32 words[2];
		f_64 xx;
	};
	words[0] = u32();
	words[1] = 0x3ff00000 | (u32() >> 12);
   // we're leaving the exponent as zero,
   // so right now we're in [1.0, 2.0).
	return xx - 1.0;
}

//------------------------------------------------------------------------------
CombinedGen1::CombinedGen1 (u_64 seed): _v(4101842887655102017LL), _w(1) {
   _u = seed ^ _v; u64();
   _v = _u;        u64();
   _w = _v;        u64();
}

//------------------------------------------------------------------------------
u_64 CombinedGen1::u64 () {
   _u = _u * 2862933555777941757LL + 7046029254386353087LL;
   _v ^= _v >> 17;
   _v ^= _v << 31;
   _v ^= _v >> 8;
   _w = 4294957665U*(_w & 0xffffffff) + (_w >> 32);
   u_64 x = _u;
   x ^= x << 21;
   x ^= x >> 35;
   x ^= x << 4;
   return (x + _v) ^ _w;
}

//------------------------------------------------------------------------------
double NormalGen::next () {
   double u, v, x, y, q;
   do {
      u = _unif->f64();
      v = 1.7156 * (_unif->f64() - 0.5);
      x = u - 0.449871;
      y = abs(v) + 0.386595;
      q = x*x + y * (0.19600*y - 0.25472*x);
   } while ( q > 0.27597 && ( q > 0.27846 || v*v > -4.0 * log(u) * sqrt(u) ) );
   return _mean + _var*v/u;
}
